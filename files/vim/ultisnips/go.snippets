# top-level {{{

snippet pa
package ${0:name}
endsnippet

snippet im
import (
	"${0:pkg}"
)
endsnippet

snippet cons
const (
	$0
)
endsnippet

# }}}
# types {{{

snippet in
type ${1:name} interface {
	$0
}
endsnippet

snippet st
type ${1:name} struct {
	$0
}
endsnippet

# }}}
# conditionals {{{

snippet if
if ${1:cond} {
	$0
}
endsnippet

snippet ife
if err := ${1:exp}; err != nil {
	${0:return err}
}
endsnippet

snippet ifa
if ${1:a} := ${2:exp}; ${3:cond} {
	$0
}
endsnippet

snippet el
else {
	$0
}
endsnippet

snippet elif
else if ${1:cond} {
	$0
}
endsnippet

snippet elife
else if err := ${1:exp}; err != nil {
	${0:return err}
}
endsnippet

snippet elifa
else if ${1:a} := ${2:exp}; ${3:cond} {
	$0
}
endsnippet

# }}}
# switches {{{

snippet sw
switch ${1:exp} {
$0
}
endsnippet

snippet swa
switch ${1:a} := ${1:exp}; ${3:exp} {
$0
}
endsnippet

snippet ty
switch ${1:val}.(type) {
$0
}
endsnippet

snippet tya
switch ${1:t} := ${2:val}.(type) {
$0
}
endsnippet

snippet sel
select {
$0
}
endsnippet

snippet ca
case ${1:exp}:
	$0
endsnippet

# }}}
# functions {{{

snippet fn
func ${1:name}($2) $3{
	$0
}
endsnippet

snippet rfn
func (${1:rcvr}) ${2:name}($3) $4{
	$0
}
endsnippet

snippet gofn
go func() {
	$0
}()
endsnippet

snippet test
func Test${1:Name}(t *testing.T) {
	$0
}
endsnippet

snippet bench
func Benchmark${1:Name}(b *testing.B) {
	$0
}
endsnippet

# }}}
# loops {{{

snippet loop
for {
	$0
}
endsnippet

snippet wh
for ${1:cond} {
	$0
}
endsnippet

snippet fori
for ${1:i} := 0; $1 < ${2:max}; $1++ {
	${0}
}
endsnippet

snippet forx
for ${1:x} := ${2:min}; $1 <= ${3:max}; $1++ {
	${0}
}
endsnippet

snippet forr
for ${1:x} := range ${2:vals} {
	${0}
}
endsnippet

snippet forkv
for ${1:k}, ${2:v} := range ${3:vals} {
	${0}
}
endsnippet

snippet foriv
for i, ${1:v} := range ${2:vals} {
	${0}
}
endsnippet

snippet fork
for ${1:k} := range ${2:vals} {
	${0}
}
endsnippet

snippet forv
for _, ${1:v} := range ${2:vals} {
	${0}
}
endsnippet

# }}}
# misc {{{

snippet cases
cases := []struct {
	${1}
}{
	${2}
}
for _, c := range cases {
	${0}
}
endsnippet

# }}}
